---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import SearchBar from '../components/SearchBar.astro';
import CategoryFilter from '../components/CategoryFilter.astro';
import ResearchCard from '../components/ResearchCard.astro';
import ChatSidebar from '../components/ChatSidebar.astro';
import RefreshButton from '../components/RefreshButton.astro';
import { papers } from '../data/papers';
---

<Layout title="Research Insights Daily">
  <RefreshButton />
  <Header />
  <main class="min-h-screen bg-gray-50">
    <SearchBar />
    
    <div class="container mx-auto px-4 sm:px-6 lg:px-8 py-12">
      <CategoryFilter />
      
      <div id="searchResults" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 sm:gap-6 lg:gap-8">
        {papers.map((paper, index) => (
          <ResearchCard {...paper} index={index} />
        ))}
      </div>
    </div>
  </main>
  <ChatSidebar isOpen={false} />
</Layout>

<script>
  import { initializeChatTriggers } from '../utils/chat';
  import { searchStore } from '../stores/searchStore';
  import { categoryStore } from '../stores/categoryStore';
  import { animateArticles } from '../utils/animations';
  
  initializeChatTriggers();
  animateArticles();

  const resultsContainer = document.getElementById('searchResults');
  
  function renderResults(papers: any[]) {
    if (!resultsContainer) return;
    
    resultsContainer.innerHTML = papers.map((paper, index) => `
      <article class="article-card group h-full">
        <a href="/paper/${index}" class="block h-full">
          <div class="bg-white rounded-xl shadow-sm hover:shadow-lg transition-all duration-300 h-full flex flex-col transform hover:-translate-y-1">
            <div class="p-4 sm:p-6 flex flex-col flex-grow">
              <div class="flex flex-wrap items-center gap-2 mb-3">
                <span class="px-3 py-1 text-xs font-semibold bg-indigo-100 text-indigo-800 rounded-full">
                  ${paper.journal}
                </span>
                <time class="text-sm text-gray-500">
                  ${new Date(paper.date).toLocaleDateString('en-US', { 
                    month: 'short', 
                    day: 'numeric', 
                    year: 'numeric' 
                  })}
                </time>
              </div>

              <h2 class="text-lg sm:text-xl font-bold text-gray-900 mb-2 group-hover:text-indigo-600 transition-colors line-clamp-2">
                ${paper.title}
              </h2>

              <div class="mb-3">
                <p class="text-sm text-gray-600 line-clamp-1">
                  ${paper.authors.join(', ')}
                </p>
              </div>

              <p class="text-gray-700 text-sm line-clamp-3 mb-4 flex-grow">
                ${paper.abstract}
              </p>

              <div class="flex justify-between items-center mt-auto">
                <button 
                  class="text-sm font-medium text-indigo-600 hover:text-indigo-800 transition-colors chat-trigger"
                  onclick="event.preventDefault(); event.stopPropagation();"
                >
                  Discuss with AI
                </button>
                <span class="inline-flex items-center text-sm font-medium text-indigo-600 hover:text-indigo-800 transition-colors group-hover:translate-x-1 duration-300">
                  Read Full Paper
                  <svg class="w-4 h-4 ml-1" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z" clip-rule="evenodd" />
                  </svg>
                </span>
              </div>
            </div>
          </div>
        </a>
      </article>
    `).join('');
    
    initializeChatTriggers();
    animateArticles();
  }

  // Subscribe to both search and category stores
  searchStore.subscribe(() => {
    const searchResults = searchStore.getResults();
    const selectedCategory = categoryStore.getSelectedCategory();
    
    // Filter by category if not "All"
    const filteredResults = selectedCategory === 'All' 
      ? searchResults 
      : searchResults.filter(paper => 
          paper.journal === selectedCategory || 
          paper.title.includes(selectedCategory) || 
          paper.abstract.includes(selectedCategory)
        );
    
    renderResults(filteredResults);
  });

  categoryStore.subscribe(() => {
    const categoryResults = categoryStore.getResults();
    const searchQuery = searchStore.getQuery();
    
    // Filter by search if there's a query
    const filteredResults = searchQuery 
      ? categoryResults.filter(paper => {
          const searchableText = [
            paper.title,
            paper.abstract,
            paper.journal,
            ...paper.authors
          ].join(' ').toLowerCase();
          
          return searchQuery.toLowerCase().split(' ')
            .every(term => searchableText.includes(term));
        })
      : categoryResults;
    
    renderResults(filteredResults);
  });
</script>